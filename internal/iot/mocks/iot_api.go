// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	iot "github.com/arduino/iot-client-go/v2"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetRawTimeSeriesByThing provides a mock function with given fields: ctx, thingID, from, to
func (_m *API) GetRawTimeSeriesByThing(ctx context.Context, thingID string, from time.Time, to time.Time) (*iot.ArduinoSeriesRawBatch, bool, error) {
	ret := _m.Called(ctx, thingID, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRawTimeSeriesByThing")
	}

	var r0 *iot.ArduinoSeriesRawBatch
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) (*iot.ArduinoSeriesRawBatch, bool, error)); ok {
		return rf(ctx, thingID, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) *iot.ArduinoSeriesRawBatch); ok {
		r0 = rf(ctx, thingID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ArduinoSeriesRawBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) bool); ok {
		r1 = rf(ctx, thingID, from, to)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time, time.Time) error); ok {
		r2 = rf(ctx, thingID, from, to)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTimeSeriesByThing provides a mock function with given fields: ctx, thingID, from, to, interval, aggregationStat
func (_m *API) GetTimeSeriesByThing(ctx context.Context, thingID string, from time.Time, to time.Time, interval int64, aggregationStat string) (*iot.ArduinoSeriesBatch, bool, error) {
	ret := _m.Called(ctx, thingID, from, to, interval, aggregationStat)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeSeriesByThing")
	}

	var r0 *iot.ArduinoSeriesBatch
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time, int64, string) (*iot.ArduinoSeriesBatch, bool, error)); ok {
		return rf(ctx, thingID, from, to, interval, aggregationStat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time, int64, string) *iot.ArduinoSeriesBatch); ok {
		r0 = rf(ctx, thingID, from, to, interval, aggregationStat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ArduinoSeriesBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time, int64, string) bool); ok {
		r1 = rf(ctx, thingID, from, to, interval, aggregationStat)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time, time.Time, int64, string) error); ok {
		r2 = rf(ctx, thingID, from, to, interval, aggregationStat)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTimeSeriesStringSampling provides a mock function with given fields: ctx, properties, from, to, interval
func (_m *API) GetTimeSeriesStringSampling(ctx context.Context, properties []string, from time.Time, to time.Time, interval int32) (*iot.ArduinoSeriesBatchSampled, bool, error) {
	ret := _m.Called(ctx, properties, from, to, interval)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeSeriesStringSampling")
	}

	var r0 *iot.ArduinoSeriesBatchSampled
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, time.Time, time.Time, int32) (*iot.ArduinoSeriesBatchSampled, bool, error)); ok {
		return rf(ctx, properties, from, to, interval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, time.Time, time.Time, int32) *iot.ArduinoSeriesBatchSampled); ok {
		r0 = rf(ctx, properties, from, to, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ArduinoSeriesBatchSampled)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, time.Time, time.Time, int32) bool); ok {
		r1 = rf(ctx, properties, from, to, interval)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, time.Time, time.Time, int32) error); ok {
		r2 = rf(ctx, properties, from, to, interval)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ThingList provides a mock function with given fields: ctx, ids, device, props, tags
func (_m *API) ThingList(ctx context.Context, ids []string, device *string, props bool, tags map[string]string) ([]iot.ArduinoThing, error) {
	ret := _m.Called(ctx, ids, device, props, tags)

	if len(ret) == 0 {
		panic("no return value specified for ThingList")
	}

	var r0 []iot.ArduinoThing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *string, bool, map[string]string) ([]iot.ArduinoThing, error)); ok {
		return rf(ctx, ids, device, props, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, *string, bool, map[string]string) []iot.ArduinoThing); ok {
		r0 = rf(ctx, ids, device, props, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iot.ArduinoThing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, *string, bool, map[string]string) error); ok {
		r1 = rf(ctx, ids, device, props, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
